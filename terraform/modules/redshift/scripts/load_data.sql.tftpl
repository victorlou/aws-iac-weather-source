-- Create temporary tables if they do not exist
CREATE TABLE IF NOT EXISTS ${environment}_weather_source_bronze.historical_temp (
  cldCvr VARCHAR(100),
  dewPt VARCHAR(100),
  feelsLike VARCHAR(100),
  freezingRainFlag VARCHAR(100),
  heatIndex VARCHAR(100),
  icePelletsFlag VARCHAR(100),
  mslPres VARCHAR(100),
  precip VARCHAR(100),
  presTend VARCHAR(100),
  provisionalFlag VARCHAR(100),
  radSolar VARCHAR(100),
  rainFlag VARCHAR(100),
  relHum VARCHAR(100),
  sfcPres VARCHAR(100),
  snowFlag VARCHAR(100),
  snowfall VARCHAR(100),
  spcHum VARCHAR(100),
  temp VARCHAR(100),
  timestamp VARCHAR(100),
  vis VARCHAR(100),
  wetBulb VARCHAR(100),
  windChill VARCHAR(100),
  windDir VARCHAR(100),
  windDir100m VARCHAR(100),
  windDir80m VARCHAR(100),
  windSpd VARCHAR(100),
  windSpd100m VARCHAR(100),
  windSpd80m VARCHAR(100),
  latitude VARCHAR(100),
  longitude VARCHAR(100),
  timezone VARCHAR(100),
  elevation VARCHAR(100),
  country_code VARCHAR(100),
  country_name VARCHAR(100),
  data_type VARCHAR(100),
  processed_at VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS ${environment}_weather_source_bronze.forecast_temp (
  cldCvr VARCHAR(100),
  dewPt VARCHAR(100),
  feelsLike VARCHAR(100),
  freezingRainFlag VARCHAR(100),
  heatIndex VARCHAR(100),
  icePelletsFlag VARCHAR(100),
  mslPres VARCHAR(100),
  precip VARCHAR(100),
  presTend VARCHAR(100),
  provisionalFlag VARCHAR(100),
  radSolar VARCHAR(100),
  rainFlag VARCHAR(100),
  relHum VARCHAR(100),
  sfcPres VARCHAR(100),
  snowFlag VARCHAR(100),
  snowfall VARCHAR(100),
  spcHum VARCHAR(100),
  temp VARCHAR(100),
  timestamp VARCHAR(100),
  vis VARCHAR(100),
  wetBulb VARCHAR(100),
  windChill VARCHAR(100),
  windDir VARCHAR(100),
  windDir100m VARCHAR(100),
  windDir80m VARCHAR(100),
  windSpd VARCHAR(100),
  windSpd100m VARCHAR(100),
  windSpd80m VARCHAR(100),
  latitude VARCHAR(100),
  longitude VARCHAR(100),
  timezone VARCHAR(100),
  elevation VARCHAR(100),
  country_code VARCHAR(100),
  country_name VARCHAR(100),
  data_type VARCHAR(100),
  processed_at VARCHAR(100)
);

-- Truncate temporary tables
TRUNCATE TABLE ${environment}_weather_source_bronze.historical_temp;
TRUNCATE TABLE ${environment}_weather_source_bronze.forecast_temp;

-- Copy data from S3 to temporary tables
COPY ${environment}_weather_source_bronze.historical_temp (
  cldCvr, dewPt, feelsLike, freezingRainFlag, heatIndex, icePelletsFlag, mslPres, precip, presTend, provisionalFlag, radSolar, rainFlag, relHum, sfcPres, snowFlag, snowfall, spcHum, temp, timestamp, vis, wetBulb, windChill, windDir, windDir100m, windDir80m, windSpd, windSpd100m, windSpd80m, latitude, longitude, timezone, elevation, country_code, country_name, data_type, processed_at
)
FROM 's3://${data_bucket_name}/historical/'
IAM_ROLE '${redshift_role_arn}'
FORMAT AS PARQUET
ACCEPTINVCHARS AS '^'
FILLRECORD;

-- Set default values for metadata columns after copy
UPDATE ${environment}_weather_source_bronze.historical_temp 
SET source_file = 's3://${data_bucket_name}/historical/',
    created_at = GETDATE(),
    updated_at = GETDATE(),
    id = 'hist_' || LEFT(MD5(RANDOM()::TEXT), 32);

COPY ${environment}_weather_source_bronze.forecast_temp (
  cldCvr, dewPt, feelsLike, freezingRainFlag, heatIndex, icePelletsFlag, mslPres, precip, presTend, provisionalFlag, radSolar, rainFlag, relHum, sfcPres, snowFlag, snowfall, spcHum, temp, timestamp, vis, wetBulb, windChill, windDir, windDir100m, windDir80m, windSpd, windSpd100m, windSpd80m, latitude, longitude, timezone, elevation, country_code, country_name, data_type, processed_at
)
FROM 's3://${data_bucket_name}/forecast/'
IAM_ROLE '${redshift_role_arn}'
FORMAT AS PARQUET
ACCEPTINVCHARS AS '^'
FILLRECORD;

-- Set default values for metadata columns after copy
UPDATE ${environment}_weather_source_bronze.forecast_temp 
SET source_file = 's3://${data_bucket_name}/forecast/',
    created_at = GETDATE(),
    updated_at = GETDATE(),
    id = 'fcst_' || LEFT(MD5(RANDOM()::TEXT), 32);

-- Merge historical data
MERGE INTO ${environment}_weather_source_bronze.historical target
USING (
    SELECT 
        'hist_' || LEFT(MD5(RANDOM()::TEXT), 32) as id,
        CAST(t.latitude AS DECIMAL(9,6)) as latitude,
        CAST(t.longitude AS DECIMAL(9,6)) as longitude,
        t.timezone,
        t.country_code,
        t.country_name,
        t.subdiv_code,
        t.subdiv_name,
        t.grid,
        CAST(t.elevation AS DECIMAL(10,2)) as elevation,
        CAST(t.timestamp_utc AS TIMESTAMP) as timestamp_utc,
        CAST(t.provisional_flag AS BOOLEAN) as provisional_flag,
        CAST(t.cld_cvr AS DECIMAL(5,2)) as cld_cvr,
        CAST(t.dew_pt AS DECIMAL(6,2)) as dew_pt,
        CAST(t.feels_like AS DECIMAL(6,2)) as feels_like,
        CAST(t.heat_index AS DECIMAL(6,2)) as heat_index,
        CAST(t.msl_pres AS DECIMAL(8,2)) as msl_pres,
        CAST(t.precip AS DECIMAL(6,2)) as precip,
        CAST(t.pres_tend AS DECIMAL(6,2)) as pres_tend,
        CAST(t.rad_solar AS DECIMAL(8,2)) as rad_solar,
        CAST(t.rel_hum AS DECIMAL(5,2)) as rel_hum,
        CAST(t.sfc_pres AS DECIMAL(8,2)) as sfc_pres,
        CAST(t.snowfall AS DECIMAL(6,2)) as snowfall,
        CAST(t.spc_hum AS DECIMAL(6,2)) as spc_hum,
        CAST(t.temp AS DECIMAL(6,2)) as temp,
        CAST(t.vis AS DECIMAL(6,2)) as vis,
        CAST(t.wet_bulb AS DECIMAL(6,2)) as wet_bulb,
        CAST(t.wind_chill AS DECIMAL(6,2)) as wind_chill,
        CAST(t.wind_dir AS DECIMAL(6,2)) as wind_dir,
        CAST(t.wind_dir_100m AS DECIMAL(6,2)) as wind_dir_100m,
        CAST(t.wind_dir_80m AS DECIMAL(6,2)) as wind_dir_80m,
        CAST(t.wind_spd AS DECIMAL(6,2)) as wind_spd,
        CAST(t.wind_spd_100m AS DECIMAL(6,2)) as wind_spd_100m,
        CAST(t.wind_spd_80m AS DECIMAL(6,2)) as wind_spd_80m,
        CAST(t.rain_flag AS BOOLEAN) as rain_flag,
        CAST(t.snow_flag AS BOOLEAN) as snow_flag,
        's3://${data_bucket_name}/historical/' as source_file,
        GETDATE() as created_at,
        GETDATE() as updated_at
    FROM ${environment}_weather_source_bronze.historical_temp t
) source
ON target.timestamp_utc = CAST(source."timestamp" AS TIMESTAMP)
   AND target.latitude = CAST(source.latitude AS DECIMAL(9,6))
   AND target.longitude = CAST(source.longitude AS DECIMAL(9,6))
WHEN MATCHED THEN
  UPDATE SET
    latitude = source.latitude,
    longitude = source.longitude,
    timezone = source.timezone,
    country_code = source.country_code,
    country_name = source.country_name,
    subdiv_code = source.subdiv_code,
    subdiv_name = source.subdiv_name,
    grid = source.grid,
    elevation = source.elevation,
    provisional_flag = source.provisional_flag,
    cld_cvr = source.cld_cvr,
    dew_pt = source.dew_pt,
    feels_like = source.feels_like,
    heat_index = source.heat_index,
    msl_pres = source.msl_pres,
    precip = source.precip,
    pres_tend = source.pres_tend,
    rad_solar = source.rad_solar,
    rel_hum = source.rel_hum,
    sfc_pres = source.sfc_pres,
    snowfall = source.snowfall,
    spc_hum = source.spc_hum,
    temp = source.temp,
    vis = source.vis,
    wet_bulb = source.wet_bulb,
    wind_chill = source.wind_chill,
    wind_dir = source.wind_dir,
    wind_dir_100m = source.wind_dir_100m,
    wind_dir_80m = source.wind_dir_80m,
    wind_spd = source.wind_spd,
    wind_spd_100m = source.wind_spd_100m,
    wind_spd_80m = source.wind_spd_80m,
    rain_flag = source.rain_flag,
    snow_flag = source.snow_flag,
    updated_at = GETDATE(),
    source_file = source.source_file
WHEN NOT MATCHED THEN
  INSERT VALUES (source.*);

-- Merge forecast data
MERGE INTO ${environment}_weather_source_bronze.forecast target
USING (
    SELECT 
        'fcst_' || LEFT(MD5(RANDOM()::TEXT), 32) as id,
        CAST(t.latitude AS DECIMAL(9,6)) as latitude,
        CAST(t.longitude AS DECIMAL(9,6)) as longitude,
        t.timezone,
        t.country_code,
        t.country_name,
        t.subdiv_code,
        t.subdiv_name,
        t.grid,
        CAST(t.elevation AS DECIMAL(10,2)) as elevation,
        CAST(t.timestamp_utc AS TIMESTAMP) as timestamp_utc,
        CAST(t.timestamp_init_utc AS TIMESTAMP) as timestamp_init_utc,
        CAST(t.cld_cvr AS DECIMAL(5,2)) as cld_cvr,
        CAST(t.dew_pt AS DECIMAL(6,2)) as dew_pt,
        CAST(t.feels_like AS DECIMAL(6,2)) as feels_like,
        CAST(t.heat_index AS DECIMAL(6,2)) as heat_index,
        CAST(t.msl_pres AS DECIMAL(8,2)) as msl_pres,
        CAST(t.precip AS DECIMAL(6,2)) as precip,
        CAST(t.precip_prob AS DECIMAL(5,2)) as precip_prob,
        CAST(t.rad_solar AS DECIMAL(8,2)) as rad_solar,
        CAST(t.rel_hum AS DECIMAL(5,2)) as rel_hum,
        CAST(t.sfc_pres AS DECIMAL(8,2)) as sfc_pres,
        CAST(t.snowfall AS DECIMAL(6,2)) as snowfall,
        CAST(t.snowfall_prob AS DECIMAL(5,2)) as snowfall_prob,
        CAST(t.spc_hum AS DECIMAL(6,2)) as spc_hum,
        CAST(t.temp AS DECIMAL(6,2)) as temp,
        CAST(t.wet_bulb AS DECIMAL(6,2)) as wet_bulb,
        CAST(t.wind_chill AS DECIMAL(6,2)) as wind_chill,
        CAST(t.wind_dir AS DECIMAL(6,2)) as wind_dir,
        CAST(t.wind_dir_100m AS DECIMAL(6,2)) as wind_dir_100m,
        CAST(t.wind_dir_80m AS DECIMAL(6,2)) as wind_dir_80m,
        CAST(t.wind_spd AS DECIMAL(6,2)) as wind_spd,
        CAST(t.wind_spd_100m AS DECIMAL(6,2)) as wind_spd_100m,
        CAST(t.wind_spd_80m AS DECIMAL(6,2)) as wind_spd_80m,
        's3://${data_bucket_name}/forecast/' as source_file,
        GETDATE() as created_at,
        GETDATE() as updated_at
    FROM ${environment}_weather_source_bronze.forecast_temp t
) source
ON target.timestamp_utc = CAST(source."timestamp" AS TIMESTAMP)
   AND target.timestamp_init_utc = CAST(source.timestampInit AS TIMESTAMP)
   AND target.latitude = CAST(source.latitude AS DECIMAL(9,6))
   AND target.longitude = CAST(source.longitude AS DECIMAL(9,6))
WHEN MATCHED THEN
  UPDATE SET
    latitude = source.latitude,
    longitude = source.longitude,
    timezone = source.timezone,
    country_code = source.country_code,
    country_name = source.country_name,
    subdiv_code = source.subdiv_code,
    subdiv_name = source.subdiv_name,
    grid = source.grid,
    elevation = source.elevation,
    cld_cvr = source.cld_cvr,
    dew_pt = source.dew_pt,
    feels_like = source.feels_like,
    heat_index = source.heat_index,
    msl_pres = source.msl_pres,
    precip = source.precip,
    precip_prob = source.precip_prob,
    rad_solar = source.rad_solar,
    rel_hum = source.rel_hum,
    sfc_pres = source.sfc_pres,
    snowfall = source.snowfall,
    snowfall_prob = source.snowfall_prob,
    spc_hum = source.spc_hum,
    temp = source.temp,
    wet_bulb = source.wet_bulb,
    wind_chill = source.wind_chill,
    wind_dir = source.wind_dir,
    wind_dir_100m = source.wind_dir_100m,
    wind_dir_80m = source.wind_dir_80m,
    wind_spd = source.wind_spd,
    wind_spd_100m = source.wind_spd_100m,
    wind_spd_80m = source.wind_spd_80m,
    updated_at = GETDATE(),
    source_file = source.source_file
WHEN NOT MATCHED THEN
  INSERT VALUES (source.*);

-- Drop temporary tables
DROP TABLE IF EXISTS ${environment}_weather_source_bronze.historical_temp;
DROP TABLE IF EXISTS ${environment}_weather_source_bronze.forecast_temp; 